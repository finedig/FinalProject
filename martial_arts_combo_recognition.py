# -*- coding: utf-8 -*-
"""Martial Arts Combo Recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xgKd5AeW7ISIPVfu3Fr1WUvD2NkQ4yjV
"""

from os import wait
from keras.models import load_model
from PIL import Image, ImageOps
import numpy as np

# !!! IMPORTANT !!!

# import the model and testing data before running
# manually set the model file path and the amount of frames in the test material
model = load_model('<MODEL_FILEPATH>', compile=False)
frames = 252

def predict(prediction):
  #print("Confidence level in all classes: " + str(prediction) + "\n")
  greatest_guess = 0
  index = 0
  count = 0

  for predictions in prediction:
    for guess in predictions:
      if guess > greatest_guess:
        greatest_guess = guess
        index = count
      count+= 1

  classes = ["end", "jab", "cross", "hook", "nothing"]
  #print("Class with greatest confidence was: " + str(classes[index]))
  #print("With a confidence of: " + str(greatest_guess))

  return [classes[index], greatest_guess]

def chooseImage(num):

  path = '<IMAGE_FILEPATH>/frame(' + str(num) + ').jpg'

  data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)
  image = Image.open(path)
  size = (224, 224)
  image = ImageOps.fit(image, size, Image.ANTIALIAS)
  image_array = np.asarray(image)
  normalized_image_array = (image_array.astype(np.float32) / 127.0) - 1
  data[0] = normalized_image_array

  return data

def refineList(lst):
  removals = []

  for x in range (0, len(lst)):
    if not x == 0:
      if lst[x] == lst[x-1]:
        removals.append(x-1)

  for y in range (0, len(removals)):
    del lst[removals[((y+1)*-1)]]
  
  return lst

def splitCombos(lst):
  tempLst = []
  finalLst = []

  for x in lst:
    if x == "nothing":
      wahoo = 1
    elif x == "end":
      # finish tempLst
      finalLst.append(tempLst)
      tempLst = []
    else:
      tempLst.append(x)

  for x in finalLst:
    if x == []:
      finalLst.remove([])

  return finalLst

# MAIN

superList = []
prev = ["no", 0]
now = ["no", 0]

for x in range (0, frames):
  # run the inference
  prediction = model.predict(chooseImage(x + 1))
  
  placeholder = predict(prediction)

  clss = placeholder[0]
  # print(clss)
  confidence = placeholder[1]
  
  now = ["no", 0]

  if confidence > 0.9:
    now = [clss, confidence]
  if (prev[1] + now[1])/2 > 0.9 and prev[0] == now[0]:
    superList.append(clss)

  prev = now

# print(np.array(superList))

superbList = refineList(superList)

# print(np.array(superbList))

supremeList = splitCombos(superList)

print(supremeList)